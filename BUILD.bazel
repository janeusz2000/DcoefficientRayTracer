load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
# https://docs.bazel.build/versions/master/be/c-cpp.html#cc_library


# Project Libraries
# = = = = = = = = = = = = = = = = = = = = 
cc_library(
    name = "projectLibrary",
    srcs = glob([
        "main/*.cpp",
        "core/*.cpp",
        "obj/*.cpp",
    ]),
    hdrs = glob([
        "main/*.h",
        "core/*.h",
        "obj/*.h",
    ]),
    deps = [
        ":boost",
        ":thirdParty",
    ],
)

cc_library(
    name = "boost",
    deps = [
        "@boost//:core",
    ],
)

cc_library(
    name = "thirdParty",
    deps = [
        "@github_nlohmann_json//:json",
    ],
)

cc_library(
    name = "thirdParty_test",
    deps = [
        "@com_google_googletest//:gtest_main",
    ],
)

# Executables
# = = = = = = = = = = = = = 

cc_binary(
    name = "buildTest",
    srcs = ["ApplicationBuild/buildTest.cpp"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

cc_binary(
    name = "validationGeoDome",
    srcs = [
        "ApplicationBuild/validationGeoDome.cpp",
    ],
    linkopts = ["-lpthread"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

cc_binary(
    name = "validationBothAxis",
    srcs = [
        "ApplicationBuild/validationBothAxis.cpp",
    ],
    linkopts = ["-lpthread"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

cc_binary(
    name = "validationXAxis",
    srcs = [
        "ApplicationBuild/validationXAxis.cpp",
    ],
    linkopts = ["-lpthread"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

cc_binary(
    name = "collectorTest",
    srcs = [
        "ApplicationBuild/collectorTest.cpp",
    ],
    linkopts = ["-lpthread"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

cc_binary(
    name = "debugTracking",
    srcs = [
        "ApplicationBuild/debugTracking.cpp",
    ],
    linkopts = ["-lpthread"],
    deps = [
        ":projectLibrary",
        ":thirdParty",
    ],
)

# generate compile commands database
# = = = = = = = = = = = = = = = = = =  

load("@com_grail_bazel_compdb//:defs.bzl", "compilation_database")
load("@com_grail_bazel_output_base_util//:defs.bzl", "OUTPUT_BASE")

compilation_database(
    name = "generateCompileCommands",
    targets = [
        "//:projectLibrary"
    ],
    output_base = OUTPUT_BASE,
)

# Test libraries
# = = = = = = = = = = = = = = = = = = 

cc_test(
    name = "sceneManager_test",
    size = "medium",
    srcs = [
        "tests/sceneManager_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "timeTracking",
    srcs = [
        "tests/test_timeTracking.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "trackers_test",
    size = "medium",
    srcs = [
        "tests/trackers_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "simulator_test",
    size = "medium",
    srcs = [
        "tests/simulator_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "energyColector_test",
    srcs = [
        "tests/energyCollector_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "resultsCalculation_test",
    srcs = [
        "tests/resultsCalculation_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "sphereCollision_test",
    srcs = [
        "tests/sphere_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "main_test",
    srcs = [
        "tests/main_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "rayTracer_test",
    srcs = [
        "tests/rayTracer_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)

cc_test(
    name = "generator_test",
    srcs = [
        "tests/generator_test.cpp",
    ],
    deps = [
        ":projectLibrary",
        ":thirdParty_test",
    ],
)
